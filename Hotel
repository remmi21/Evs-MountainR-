package models;
import java.util.ArrayList;
import java.time.LocalDate;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;

public class Hotel{
	private String hotelid;
	private String hotelname;
	private String location;
	private String Street;
	private ArrayList<Room>deluxeRoom=new ArrayList<Room>();
	private ArrayList<Room>standardRoom=new ArrayList<Room>();
	private ArrayList<Room>premiumRoom=new ArrayList<Room>();
	
	public Hotel(String id,String name, String loc,String street){
		this.hotelid=id;
		this.hotelname=name;
		this.location=loc;
		this.Street=street;
		addRoom("7","Standart");
		addRoom("3","Premium");
		addRoom("1","Deluxe");
	}
	
	public String getHotelid() {
		return hotelid;
	}

	public void setHotelid(String hotelid) {
		this.hotelid = hotelid;
	}

	public String getHotelname() {
		return hotelname;
	}

	public void setHotelname(String hotelname) {
            if(hotelname!=null){
		this.hotelname = hotelname;
            }
	}

	public String getLocation() {
		return location;
	}

	public void setLocation(String location) {
	 if(location!=null){
		this.location = location;
		}
	}

	public String getStreet() {
		return Street;
	}

	public void setStreet(String street) {
            if(street!=null){
		this.Street = street;
		}
	}
        public Room getRoom(String rNum,String roomtyp){
            if(roomtyp.equals("Deluxe")){
                    for(Room r:deluxeRoom){
                        if(r.getRoomId().equals(rNum)){
                            return r;
                        }
                    }
		}
		else if(roomtyp.equals("Premium")){
                    for(Room r:premiumRoom){
                        if(r.getRoomId().equals(rNum)){
                            return r;
                        }
                    }
		}
		else if(roomtyp.equals("Standart")){
                    for(Room r:standardRoom){
                        if(r.getRoomId().equals(rNum)){
                            return r;
                        }
                    }
		}
            return null;
        }
	
	public void addRoom(String id,String roomtyp){
		if(roomtyp.equals("Deluxe")){
			deluxeRoom.add(new Room(roomtyp,id));
		}
		else if(roomtyp.equals("Premium")){
			premiumRoom.add(new Room(roomtyp,id));
		}
		else if(roomtyp.equals("Standart")){
			standardRoom.add(new Room(roomtyp,id));
		}
	}
	
	public ArrayList<Room> get_all_Rooms(){
                ArrayList<Room> all=new ArrayList<Room>();
                for(int i=0;i<deluxeRoom.size();i++){
                    all.add(deluxeRoom.get(i));
                }
                for(int i=0;i<premiumRoom.size();i++){
                    all.add(premiumRoom.get(i));
                }
                for(int i=0;i<standardRoom.size();i++){
                    all.add(standardRoom.get(i));
                }
                return all;
        }
         public Room findOneAvailableRoom(String roomType,Date startTime, Date endTime) {
        switch (roomType) {
            case "Standard":
                for (Room room : standardRoom) {
                    if (room.isAvailableBetween(startTime, endTime))  return room;
                }
                break;

            case "Premium":
                for (Room room : premiumRoom) {
                    if (room.isAvailableBetween(startTime, endTime))  return room;
                }
                break;

            case "Deluxe":
                for (Room room : deluxeRoom) {
                    if (room.isAvailableBetween(startTime, endTime)) return room;
                }
                break;
        }
        return null;
    }
    
    public ArrayList <Room> findAllAvailableRooms(String roomType,Date startTime, Date endTime) {
    	ArrayList <Room> helper = new ArrayList <Room> ();
        switch (roomType) {
            case "Standard":
                for (Room room : standardRoom) {
                    if (room.isAvailableBetween(startTime, endTime))
                    	helper.add(room);
                }
                return helper;
            case "Premium":
                for (Room room : premiumRoom) {
                    if (room.isAvailableBetween(startTime, endTime))
                    	helper.add(room);
                }
                return helper;
            case "Deluxe":
                for (Room room : deluxeRoom) {
                    if (room.isAvailableBetween(startTime, endTime))
                    	helper.add(room);
                }
                return helper;
        }
        return null;
    }
	
}

